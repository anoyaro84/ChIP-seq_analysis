"""Generate heatmap showing coverage in coordiates from output calculated by coverage_sites.py.

Take in netcdf file generated by coverage_sites.py and generate a hetamp.
The output format can be in png or jpg.


Usage:
   heatmap_generator.py [options] <netcdf_out> <fig_name>

Options:
    --color=<col_scheme>    Color scheme for matplotlib. For more options, visit http://matplotlib.org/examples/color/colormaps_reference.html [default: Reds].
    --red=<red>   Endpoint color of custom color gradient. Ignored if not color=Custom [default: 0.5].
    --green=<green>   Endpoint color of custom color gradient. Ignored if not color=Custom [default: 0.5].
    --blue=<blue>   Endpoint color of custom color gradient. Ignored if not color=Custom [default: 0.5].
    --limit=<grad_limit>    Gradient limit of read count [default: 20].
"""


from docopt import docopt
import matplotlib
import xarray as xa
import ast


def seqminer(array, names, color='Reds', lim=20):
    import matplotlib.pyplot as plt
    from mpl_toolkits.axes_grid1 import AxesGrid
    plt.rcParams['font.family'] = 'Arial'
    plt.rcParams['font.size'] = 10
    fig = plt.figure(figsize=(100, 100))

    grid = AxesGrid(fig, 142,
            nrows_ncols = (1, len(names)),
            axes_pad = 0.0,
            share_all = True,
            label_mode = "L"
            )

    for i, name in zip(range(len(names)), names):
        im = grid[i].imshow(array[i,:,:], interpolation="none", cmap=color, clim=(0.0, lim))
        grid[i].get_xaxis().set_visible(False)
        grid[i].get_yaxis().set_visible(False)
        grid[i].set_title((name.split('/')[-1]).split('.')[0])

    return fig

if __name__ == '__main__':
    # reading argmument
    arguments = docopt(__doc__)
    FileName = arguments['<netcdf_out>']
    print("Generating heatmap from " + FileName)
    File = xa.open_dataset(FileName)

    Col = arguments['--color']
    print("Using matplotlib color scheme: " + str(Col))

    if Col == 'Custom':
        cdict2 = { 'red':   [(0.0, 0.0, 1.0), (1.0, float(arguments['--red']), 1.0)],
                'green':    [(0.0, 0.0, 1.0), (1.0, float(arguments['--green']), 1.0)],
                'blue': [(0.0, 0.0, 1.0), (1.0, float(arguments['--blue']), 1.0)]
                }
        Col = matplotlib.colors.LinearSegmentedColormap('custom', cdict2, 256)

    Limit = int(arguments['--limit'])
    print("Color gradient limit: " + str(Limit))

    matplotlib.use('Agg')
    fig = seqminer(File.Coverage, File.Coverage.coords['Sample'].to_pandas(), color=Col, lim=Limit)

    OutName = arguments['<fig_name>']
    print("Saving file: " + OutName)
    fig.savefig(OutName, dpi=100, bbox_inches="tight")


