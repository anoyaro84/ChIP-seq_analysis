"""Generate heatmap showing coverage in coordiates from output calculated by coverage_sites.py.

Take in netcdf file generated by coverage_sites.py and generate a hetamp.
The output format can be in png or jpg.


Usage:
   expected_readcounts.py [options] <netcdf_out> <fig_name>

Options:
    --color=<col_scheme>    Color scheme for matplotlib. For more options, visit http://matplotlib.org/examples/color/colormaps_reference.html [default: Reds].
    --red=<red>   Endpoint color of custom color gradient. Ignored if not color=Custom [default: 0.5].
    --green=<green>   Endpoint color of custom color gradient. Ignored if not color=Custom [default: 0.5].
    --blue=<blue>   Endpoint color of custom color gradient. Ignored if not color=Custom [default: 0.5].
    --c_interval=<c_interval>    Confidence interval to be used in the figure [default: 75].
    --x_range=<x_range>   Actual range in base pairs from center of the ragion [default: 5000].
    --x_lim=<x_lim>   Axis limit for x axis [default: 2500].
    --y_lim=<y_lim>    Axis limit for y axis [default: 50].
"""

from docopt import docopt
import matplotlib
matplotlib.use('Agg')
import xarray as xa
import ast
import seaborn as sns
sns.set(style="white")
import pandas as pd
import numpy as np


def expected_average(array, names, color, xlim, ylim, x_range, c_interval):
    import matplotlib.pyplot as plt
    plt.rcParams['font.family'] = 'Arial'
    plt.rcParams['font.size'] = 20
    plt.rcParams['ytick.labelsize']='large'
    plt.rcParams['xtick.labelsize']='large'


    means = np.zeros((len(names), array.shape[2]))
    for i in range(len(names)):
        means[i,:] = array[i,:,:].mean(axis=0)

    Table = pd.DataFrame(means,
        index = names, columns = np.linspace(-x_range,x_range,array.shape[2]))

    Table = pd.concat([pd.DataFrame({"Sample": names}, index = names), Table], axis=1)

    fig = plt.figure(figsize=(10, 10))
    sns.tsplot(pd.melt(Table, id_vars = ['Sample']), ci=c_interval,
        interpolate=True, color = color, time='variable', unit='Sample', value='value')

    plt.xlim([-xlim, xlim])
    plt.ylim([0, ylim])

    return fig



if __name__ == '__main__':
    #reading argument
    arguments = docopt(__doc__)
    FileName = arguments['<netcdf_out>']
    print("Generating heatmap from " + FileName)
    File = xa.open_dataset(FileName)

    Col = arguments['--color']
    print("Using matplotlib color scheme: " + str(Col))

    if Col == 'Custom':
       Col = (float(arguments['--red']), float(arguments['--green']), float(arguments['--blue']))

    xlim = int(arguments['--x_lim'])
    ylim = int(arguments['--y_lim'])
    print("Axis range limit (x, y): ("+str(xlim)+', '+str(ylim)+')')

    x_range = int(arguments['--x_range'])
    c_interval = int(arguments['--c_interval'])

    fig = expected_average(File.Coverage, File.Coverage.coords['Sample'].to_pandas(), color=Col, xlim=xlim, ylim=ylim, x_range=x_range, c_interval=c_interval)

    OutName = arguments['<fig_name>']
    print("Saving file: " + OutName)
    fig.savefig(OutName, dpi=100, bbox_inches="tight")


