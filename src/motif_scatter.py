"""Draw a scatter plot from two motif enrichment scores.

Take two html files with motif enrichment scores (generated by Seqpos) draw a scatter plot.

Usage:
    motif_scatter.py [options] <outfile> <table1> <table2>

Options:
    --name1=<name1>    Name for the first table [default: Group1].
    --name2=<name2>    Name for the first table [default: Group2].
    --axis_min=<axis_min>    Minimum axis value in the scatter plot [default: 0].
"""

from docopt import docopt
import ast
import numpy as np
import pybedtools as pb
from bs4 import BeautifulSoup
import matplotlib
matplotlib.use('Agg')
matplotlib.rcParams['pdf.fonttype'] = 42
matplotlib.rcParams['ps.fonttype'] = 42
matplotlib.rcParams['ps.useafm'] = True
from matplotlib import pyplot as plt
import seaborn as sns
import pandas as pd
import matplotlib.patches as mpatches


def SeqpostoPanda(htmlpath):
    Table = BeautifulSoup(open(htmlpath), "lxml").find('table')
    rows = Table.findAll("tr")
    Nrow = len(rows)
    Ncol = len(rows[0].findAll("td"))

    colnames = []
    for name in rows[0].findAll("td"):
        colnames.append(name.find(text=True))

    out = pd.DataFrame(columns=colnames)


    for row,i in zip(rows, range(Nrow)):
        if i>0:
            #extract all entries
            cols=[col.find(text=True) for col in row.findAll("td")]

            #extract TF name (surrounded by <font>)
            for isfactor, idx in zip([col=="\n" for col in cols], range(len(cols))):
                if isfactor:
                    cols[idx] = row.findAll("td")[idx].findAll("font")[0].find(text=True)

            if len(cols)<10:
                cols=[""]+cols

            out.loc[i-1]=cols
    return out

def get_spaced_colors(n):
    max_value = 16581375
    interval = int(max_value/n)
    colors = [hex(I)[2:].zfill(6) for I in range(0, max_value, interval)]

    return [(int(i[:2], 16), int(i[2:4], 16), int(i[4:], 16)) for i in colors]


def draw_scatter(html1, html2, name1, name2, axis_min):
    table1 = SeqpostoPanda(html1)
    table2 = SeqpostoPanda(html2)

    Symbols = np.unique(np.concatenate((table1.factor, table2.factor)))
    Family = [None]*len(Symbols)
    Z1 = np.zeros(len(Symbols))
    Z2 = np.zeros(len(Symbols))
    for i, symbol in zip(range(len(Symbols)),Symbols):
        ind = np.where(table1.factor==symbol)[0]
        if len(ind)>0:
            Family[i] = table1["DNA binding domain"][ind[0]]
        else:
            ind = np.where(table2.factor==symbol)[0]
            Family[i] = table2["DNA binding domain"][ind[0]]

        ind1 = np.where(table1.factor==symbol)[0]
        ind2 = np.where(table2.factor==symbol)[0]


        if len(ind1) > 0:
            Z1[i] = -float(table1.zscore[ind1[0]])
        else:
            Z1[i] = 0


        if len(ind2) > 0:
            Z2[i] = -float(table2.zscore[ind2[0]])
        else:
            Z2[i] = 0

    Table = pd.DataFrame(np.transpose(np.vstack((Symbols, Family, Z1, Z2))),
                         columns=["Symbol","Family", "Z score ("+name1+")", "Z score ("+name2+")"])
    Table = Table.loc[Table.Symbol==Table.Symbol.str.upper(),:]

    # generate figure
    f = plt.figure(figsize=(11,9))
    sns.set(style="white", color_codes=True)

    grid = sns.JointGrid(Z1, Z2, space=0, size=6, ratio=1000)
    grid.plot_joint(plt.scatter, color="g")
    grid.plot_marginals(sns.rugplot, height=1, color="g")

    grid.ax_joint.cla()

    grid.ax_joint.set_ylim([axis_min,grid.ax_joint.get_ylim()[1]*0.90])
    grid.ax_joint.set_xlim([axis_min,grid.ax_joint.get_xlim()[1]*0.95])

    # colored scatter plot
    keys = Table.Family.value_counts()[0:5].index
    colors = {}
    temp_color = sns.color_palette(n_colors=len(keys)).as_hex()

    for color,key in zip(temp_color,keys):
        colors[key] = color

    for family, z1, z2, symbol in zip(Table.Family, Table["Z score ("+name1+")"],
            Table["Z score ("+name2+")"], Table.Symbol):
        if family in keys:
            grid.ax_joint.plot(z1, z2, marker = 'o', color = colors[family])
        else:
            grid.ax_joint.plot(z1, z2, marker = 'o', color = 'k')
        grid.ax_joint.text(z1, z2, symbol)

    # put label
    markers=[]
    Family = Table.Family.value_counts()[Table.Family.value_counts() > 10].index.tolist()

    for family in Family:
        markers.append(mpatches.Patch(color=colors[family], label=family))

    markers.append(mpatches.Patch(color='k', label="Other"))
    plt.legend(handles=markers, loc=2)

    grid.ax_joint.set_xlabel(name1)
    grid.ax_joint.set_xlabel(name2)
    return grid


if __name__ == '__main__':
    # reading argument
    arguments = docopt(__doc__)
    table1 = arguments['<table1>']
    table2 = arguments['<table2>']
    name1 = arguments['--name1']
    name2 = arguments['--name2']
    axis_min = float(arguments['--axis_min'])
    outfile = arguments['<outfile>']

    print("Comparing Z-scores from two tables:")
    print( table1+"("+name1+")" )
    print( table2+"("+name2+")" )

    f =  draw_scatter(table1, table2, name1, name2, axis_min=axis_min)
    print("Saving output at " + outfile)
    f.savefig(outfile, bbox_inches="tight", dpi=300)

